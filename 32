local Workspace = cloneref(game:GetService("Workspace"))
local RunService = cloneref(game:GetService("RunService"))
local Camera = Workspace.CurrentCamera

local fov_circle_outer = Drawing.new("Circle")
fov_circle_outer.Visible = true
fov_circle_outer.Thickness = 3
fov_circle_outer.Color = Color3.fromRGB(0, 0, 0)
fov_circle_outer.Position = Camera.ViewportSize / 2
fov_circle_outer.Radius = 121

local fov_circle_inner = Drawing.new("Circle")
fov_circle_inner.Visible = true
fov_circle_inner.Thickness = 1
fov_circle_inner.Color = Color3.fromRGB(255, 255, 255)
fov_circle_inner.Position = Camera.ViewportSize / 2
fov_circle_inner.Radius = 120

local snap_line_outer = Drawing.new("Line")
snap_line_outer.Visible = false
snap_line_outer.Color = Color3.fromRGB(0, 0, 0)
snap_line_outer.Thickness = 3

local snap_line_inner = Drawing.new("Line")
snap_line_inner.Visible = false
snap_line_inner.Color = Color3.fromRGB(255, 255, 255)
snap_line_inner.Thickness = 1

local Settings = {
    ["Combat"] = {
        ["Aimbot"] = {
            ["Enabled"]    = false,
            ["Mode"]       = "None",
            ["Target"]     = "None",
            ["Enabled2"]   = false,
            ["Fov Size"]   = 120,
            ["Resover"]    = false,
        }
        
    },
}
local redzlib = loadstring(game:HttpGet("https://raw.githubusercontent.com/Pumpuma/UKI/refs/heads/main/vc.txt"))()

local Window = redzlib:MakeWindow({
  Title = "reflex.club | beta",
  SubTitle = " ",
  SaveFolder = " "
})

local Combat = Window:MakeTab({"Combat", " "})
local Section1 = Combat:AddSection({"Aimbot"})

local Aimbot_Enabled = Combat:AddDropdown({
    Name = "Aimbot",
    Description = " ",
    Options = {"None", " Aimbot [Soon] ", "Silent"},
    Default = "None",
    Flag = "Aimbot_Enabled",
    Callback = function(Value)
        Settings["Combat"]["Aimbot"]["Enabled"] = Value ~= "None"
        Settings["Combat"]["Aimbot"]["Mode"] = Value
    end
})

local Aimbot_Fov_Size = Combat:AddSlider({
  Name = "Fov Size",
  Min = 1,
  Max = 500,
  Increase = 1,
  Default = 250,
  Callback = function(Value)
    Settings["Combat"]["Aimbot"]["Fov Size"] = Value
  end
})

local Aimbot_Target = Combat:AddDropdown({
    Name = "Target",
    Description = " ",
    Options = {"None", "Head", "Body"},
    Default = "None",
    Flag = "Aimbot_Target",
    Callback = function(Value)
        Settings["Combat"]["Aimbot"]["Enabled2"] = Value ~= "None"
        Settings["Combat"]["Aimbot"]["Target"] = Value
    end
})

local Aimbot_Resover = Combat:AddToggle({
  Name = "Resover",
  Default = false,
  Flag = "Aimbot_Resover"
})
Aimbot_Resover:Callback(function(Value)
   Settings["Combat"]["Aimbot"]["Resover"] = Value
end)

function to_viewport(pos)
    if typeof(pos) ~= "Vector3" then return Vector2.zero, false end
    local point, on = Camera:WorldToViewportPoint(pos)
    return Vector2.new(point.X, point.Y), on
end

local Classes = {
    ["PlayerClient"] = {},
    ["Character"] = {},
    ["BowClient"] = {},
    ["Camera"] = {},
    ["RangedWeaponClient"] = {},
    ["GetEquippedItem"] = {},
    ["FPS"] = {},
}

for _, v in pairs(getgc(true)) do
    if typeof(v) == "function" and islclosure(v) then
        local info = debug.getinfo(v)
        local name = string.match(info.short_src, "%.([%w_]+)$")
        if name and Classes[name] and info.name ~= nil then
            Classes[name][info.name] = info.func
        end
    end
end

local Players = debug.getupvalue(Classes.PlayerClient.updatePlayers, 1)

function CalculateBulletDrop(tPos, tVel, cPos, pSpeed, pDrop)
    if typeof(tPos) ~= "Vector3" or typeof(cPos) ~= "Vector3" or 
       typeof(tVel) ~= "Vector3" or typeof(pSpeed) ~= "number" or 
       typeof(pDrop) ~= "number" or pSpeed <= 0 or pDrop < 0 then
        return tPos
    end
    
    local dTT = (tPos - cPos).Magnitude  
    local tTT = dTT / pSpeed  
    local pTP = tPos + (tVel * tTT * 6.5)  
    local dP = -pDrop ^ (tTT * pDrop) + 1  
    local pPWD = pTP - Vector3.new(0, dP, 0) 
    local pHP = cPos + ((pTP - cPos).Unit * dTT)
    
    return pPWD, tTT, pHP
end


function IsSleeping(Player)
    local Animations = Player.AnimationController:GetPlayingAnimationTracks()
    for _, v in pairs(Animations) do
        if v.IsPlaying and v.Animation.AnimationId == "rbxassetid://13280887764" then
            return true
        end
    end
    return false
end

local target = nil

function GetClosestTarget(maxDistance)
    local closestTarget, targetVelocity, closestDistance = nil, nil, math.huge;

    local viewportCenter = Camera.ViewportSize / 2

    for i, v in pairs(Players) do
        if (v.model:FindFirstChild('HumanoidRootPart') and not IsSleeping(v.model)) and v.id ~= "635665" and v.id ~= "636336" then
            local distanceToPlayer = (v.model.HumanoidRootPart.Position - Camera.CFrame.Position).Magnitude;

            if (distanceToPlayer <= maxDistance) then
                local screenPoint, onScreen = Camera:WorldToViewportPoint(v.model.Head.Position);

                if (onScreen) then
                    local distanceFromCenter = (Vector2.new(screenPoint.X, screenPoint.Y) - viewportCenter).Magnitude;

                    if (distanceFromCenter < closestDistance and distanceFromCenter < fov_circle_inner.Radius) then
                        closestTarget = v
                        targetVelocity = v.velocityVector;
                        closestDistance = distanceFromCenter;
                    end
                end
            end
        end
    end;

    return closestTarget
end


RunService.Heartbeat:Connect(function()
    target = GetClosestTarget(1200)
    
    if target and target.model and target.model:FindFirstChild("Head") then
        local targetHeadPosition = target.model.Head.Position
        local targetScreenPosition, onScreen = to_viewport(targetHeadPosition)
        
        if onScreen then
            snap_line_outer.Visible = true
            snap_line_inner.Visible = true
            
            snap_line_outer.From = Camera.ViewportSize / 2
            snap_line_outer.To = targetScreenPosition
            
            snap_line_inner.From = Camera.ViewportSize / 2
            snap_line_inner.To = targetScreenPosition
        else
            snap_line_outer.Visible = false
            snap_line_inner.Visible = false
        end
    else
        snap_line_outer.Visible = false
        snap_line_inner.Visible = false
    end
end)


local projectileinfo = {
    AR15 = {Speed = 1300, Drop = 3},
    Blunderbuss = {Speed = 600, Drop = 3.5},
    Bow = {Speed = 300, Drop = 3},
    C9 = {Speed = 600, Drop = 3},
    Crossbow = {Speed = 450, Drop = 3},
    EnergyRifle = {Speed = 2000, Drop = 1.1},
    GaussRifle = {Speed = 3000, Drop = 2},
    HMAR = {Speed = 1000, Drop = 3.5},
    LeverActionRifle = {Speed = 1200, Drop = 1.5},
    M4A1 = {Speed = 1300, Drop = 4},
    PipePistol = {Speed = 500, Drop = 3},
    PipeSMG = {Speed = 600, Drop = 3},
    PumpShotgun = {Speed = 600, Drop = 2},
    SCAR = {Speed = 1300, Drop = 4},
    SVD = {Speed = 1400, Drop = 2},
    USP9 = {Speed = 600, Drop = 3},
    UZI = {Speed = 600, Drop = 3},
    RPG = {Speed = 700, Drop = 3},
}

function Get_info(wep)
    local info = projectileinfo[wep]
    if not info then
        warn("Weapon info not found for:", wep)
        return 0, 0
    end
    return info.Speed, info.Drop
end

local has_shot = 0
local oldfromOrientation
oldfromOrientation = hookfunction(CFrame.fromOrientation, newcclosure(function(p, y, r)
    if debug.info(3, "f") and debug.info(3, "n") == "fire" then
        local wepdata = getstack(3, 1)
        if not wepdata or not target or not target.model or IsSleeping(target.model) then
            return oldfromOrientation(p, y, r)
        end

        local origin = Camera.CFrame.Position
        local targetPosition = target.model:FindFirstChild("Head") and target.model.Head.Position
        local velocityVector = target.velocityVector
        local speed, drop = Get_info(wepdata.type)

        if not targetPosition then
            return oldfromOrientation(p, y, r)
        end

local predictedPosition, tTT, pHP = CalculateBulletDrop(targetPosition, velocityVector, origin, speed, drop)
        local Head = target.model:FindFirstChild("Head") or target.model.PrimaryPart
        if not Head then
            return oldfromOrientation(p, y, r)
        end

        spawn(function()
            local startTime = tick()
            while has_shot == 1 do
                RunService.Heartbeat:Wait()
            end

            has_shot = 1
            local scaledTTT = (typeof(tTT) == "number") and ((tTT * 1.1) + ((tTT ^ 2 / tTT) - tTT)) or tTT

            while tick() - startTime < scaledTTT and Settings["Combat"]["Aimbot"]["Resover"] do
                Head.CFrame = CFrame.new(pHP)
                RunService.Heartbeat:Wait()
            end
            has_shot = 0
        end)

        return Camera.CFrame:Inverse() * CFrame.lookAt(origin, predictedPosition)
    end

    return oldfromOrientation(p, y, r)
end))
