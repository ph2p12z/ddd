local GrassRemove = true

if GrassRemove == true then
    sethiddenproperty(game.Workspace.Terrain, "Decoration", false)
else
    sethiddenproperty(game.Workspace.Terrain, "Decoration", true)
end

loadstring(game:HttpGet('https://raw.githubusercontent.com/ph2p12z/ddd/refs/heads/main/as'))()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ph2p12z/ddd/refs/heads/main/crs'))()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ph2p12z/2/refs/heads/main/saaa'))()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ph2p12z/2a/refs/heads/main/sf'))()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ph2p12z/2a/refs/heads/main/afas'))()

for i,v in getgc(true) do
    if typeof(v) == "function" and debug.getinfo(v).name == "fire" then
        local old; old = hookfunction(v, function(...)
            local args = {...}

            
            args[1].AimRecoil.camerX = 0
            args[1].AimRecoil.cameraY = 0
            args[1].AimRecoil.push = 0

          
            args[1].HipRecoil.camerX = 0
            args[1].HipRecoil.cameraY = 0
            args[1].HipRecoil.push = 0

            
            args[1].Accuracy = math.huge

            

            args[1].FireAction = "auto"

            local mt = getmetatable(args[1]) 
            if mt then
                if mt.__index then
                    for key, value in pairs(mt.__index) do
                    end
                end
            end
            return old(unpack(args))
        end)
    end
end

local xrayEnabled = false

local function xray()
    for _, v in pairs(workspace:GetDescendants()) do
        if v:IsA("BasePart") and not v.Parent:FindFirstChildWhichIsA("Humanoid") and not v.Parent.Parent:FindFirstChildWhichIsA("Humanoid") then
            v.LocalTransparencyModifier = xrayEnabled and 0.5 or 0
        end
    end
end

local player = game.Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

local Button = Instance.new("ScreenGui")
local XrayButton = Instance.new("TextButton")

Button.Name = "Button"
Button.Parent = playerGui
Button.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

XrayButton.Name = "XrayButton"
XrayButton.Parent = Button
XrayButton.BackgroundColor3 = Color3.new(0, 0, 0)
XrayButton.BorderColor3 = Color3.new(255, 255, 255)
XrayButton.BorderSizePixel = 1
XrayButton.Position = UDim2.new(0.0125421258, 0, 0.791315794 - 0.05 - 0.025, 0) 
XrayButton.Size = UDim2.new(0, 95, 0, 25)
XrayButton.Font = Enum.Font.Michroma
XrayButton.Text = "Xray"
XrayButton.TextColor3 = Color3.new(255, 255, 255)
XrayButton.TextSize = 21

XrayButton.MouseButton1Click:Connect(function()
    xrayEnabled = not xrayEnabled
    xray()
end)

local Workspace = game:GetService('Workspace');
local UserInputService = game:GetService("UserInputService");
local RunService = game:GetService('RunService');
local LocalPlayer = game:GetService('Players').LocalPlayer;
local Ignore = Workspace:FindFirstChild('Ignore');
local ClientPlayer = Ignore:FindFirstChild('LocalCharacter');

local longNeckToggled = false;

local function LongNeckyWecky()
	if (longNeckToggled) then
		Ignore.LocalCharacter.Bottom.PrismaticConstraint.UpperLimit = 8;
		Ignore.LocalCharacter.Bottom.PrismaticConstraint.LowerLimit = 1.65;
	else
		Ignore.LocalCharacter.Bottom.PrismaticConstraint.UpperLimit = 8.2;
		Ignore.LocalCharacter.Bottom.PrismaticConstraint.LowerLimit = 8.2;
	end;
	longNeckToggled = not longNeckToggled;
end;

local HeadIndex;
HeadIndex = hookmetamethod(game, "__index", newcclosure(function(Self, Index)
	if (tostring(Self) == "Head" and Index == "Size") then
		return Vector3.new(1.672248125076294, 0.835624098777771, 0.835624098777771);
	end;
	return HeadIndex(Self, Index);
end));

local TorsoIndex;
TorsoIndex = hookmetamethod(game, "__index", newcclosure(function(Self, Index)
	if (tostring(Self) == "Torso" and Index == "Size") then
		return Vector3.new(0.6530659198760986, 2.220424175262451, 1.4367451667785645);
	end;
	return TorsoIndex(Self, Index);
end));

local LongNeckUpperIndex;
LongNeckUpperIndex = hookmetamethod(game, "__index", newcclosure(function(Self, Index)
	if (tostring(Self) == "PrismaticConstraint" and Index == "UpperLimit") then
		return 3;
	end;
	return LongNeckUpperIndex(Self, Index);
end));

local LongNeckLowerIndex;
LongNeckLowerIndex = hookmetamethod(game, "__index", newcclosure(function(Self, Index)
	if (tostring(Self) == "PrismaticConstraint" and Index == "LowerLimit") then
		return 1.65;
	end;
	return LongNeckLowerIndex(Self, Index);
end));

local Button = Instance.new("ScreenGui");
local TextButton = Instance.new("TextButton");

Button.Name = "Button";
Button.Parent = LocalPlayer:WaitForChild("PlayerGui");
Button.ZIndexBehavior = Enum.ZIndexBehavior.Sibling;

TextButton.Name = "LongNeckButton";
TextButton.Parent = Button;
TextButton.BackgroundColor3 = Color3.new(0, 0, 0);
TextButton.BorderColor3 = Color3.new(255, 255, 255);
TextButton.BorderSizePixel = 1;
TextButton.Position = UDim2.new(0.0125421258, 0, 0.791315794, 0);
TextButton.Size = UDim2.new(0, 95, 0, 25);
TextButton.Font = Enum.Font.Michroma;
TextButton.Text = "Longneck";
TextButton.TextColor3 = Color3.new(255, 255, 255);
TextButton.TextSize = 21;

TextButton.MouseButton1Click:Connect(function()
	LongNeckyWecky();
end);

UserInputService.InputBegan:Connect(function(input, gameProcessed)
	if (gameProcessed) then return end;
	if (input.KeyCode == Enum.KeyCode.X) then
		LongNeckyWecky();
	end;
end);
